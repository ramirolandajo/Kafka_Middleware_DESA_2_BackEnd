# Archivo de configuracion minimo
spring.main.banner-mode=off
server.port=8090

# Kafka (defaults) - middleware no debe conectar a Kafka por defecto
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.topic.core-events=core-events
spring.kafka.consumer.group-id=kafka-middleware-group

# Modulos autorizados (client ids extraidos del token)
app.authorized-modules=inventory-service,ecommerce-app,analytics-service

# Enable or disable Kafka usage (middleware debe estar desacoplado por defecto)
app.kafka.enabled=false

# Storage type (MEMORY | DATABASE). Puedes override con APP_STORAGE_TYPE
app.storage.type=${APP_STORAGE_TYPE:DATABASE}

# ---- H2 / JPA (persistencia temporal) ----
# DataSource H2 en memoria
spring.datasource.url=jdbc:h2:mem:middlewaredb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE
spring.datasource.driverClassName=org.h2.Driver
spring.datasource.username=sa
spring.datasource.password=

# Hibernate
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.open-in-view=false
spring.jpa.properties.hibernate.jdbc.time_zone=UTC

# Logs de SQL
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.orm.jdbc.bind=TRACE

# Consola H2
spring.h2.console.enabled=true
spring.h2.console.path=/h2-console

# Logging para verificar modo de persistencia
logging.level.com.example.kafkamiddleware.service.EventStore=DEBUG

# Keycloak (token endpoint + client credentials - en prod usar vault/vars de entorno)
# Puedes sobrescribir estas propiedades con variables de entorno (KEYCLOAK_URL, KEYCLOAK_REALM, KEYCLOAK_CLIENT_ID, KEYCLOAK_CLIENT_SECRET)
keycloak.token.url=${KEYCLOAK_TOKEN_URL:http://localhost:8080/realms/ecommerce/protocol/openid-connect/token}
keycloak.client-id=${KEYCLOAK_CLIENT_ID:ecommerce-app}
# Para entornos seguros, ponga el client-secret en variables de entorno o en un vault.
keycloak.client-secret=${KEYCLOAK_CLIENT_SECRET:}

# JWKS URI para validar firmas de los tokens (usado por TokenService si existe)
security.jwks-uri=${SECURITY_JWKS_URI:http://localhost:8080/realms/ecommerce/protocol/openid-connect/certs}

# ---- Core forwarding ----
core.api.url=${CORE_API_URL:http://localhost:8082/api}
core.api.resource-path=${CORE_API_RESOURCE_PATH:/core/events}
app.core.forward.enabled=${APP_CORE_FORWARD_ENABLED:true}

# Mapeo de originModule (clientId -> nombre canonico)
app.origin.map=${APP_ORIGIN_MAP:ecommerce-app:Ventas,inventory-service:Inventario,analytics-service:Analitica}
